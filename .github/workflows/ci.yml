name: CI

on:
  push:
    branches:
      - main
      - release/**

  pull_request:

jobs:
    
  build:
    name: Unity ${{matrix.testt}} droid ${{matrix.api-level}}
    runs-on: macos-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        testt: [ "14.1", "14.2", "14.3"]
        api-level: [21, 25, 31, latest]
         

    steps:
      # Tag: 0.9.1
      
      # outputs variabled: version-label, api-level, target, arch
      - name: Configure Android Settings
        id: droid-settings
        shell: pwsh
        run : |
          # Setup API Level
          
          echo "::group::Test group 1"
          Write-Host "bla"
          Write-Host "bla"
          Write-Host "bla"
          Write-Host "bla"
          Write-Host "bla"
          echo "::endgroup::"
          Write-Host "Test" -BackgroundColor Gray
          Write-Host "te" -ForegroundColor Green
          Write-Host "te" -ForegroundColor Green -BackgroundColor Gray
          $apiLevel = '${{ matrix.api-level }}'
          if ( $apiLevel -eq 'latest') 
          {
            $response = (Invoke-WebRequest -UseBasicParsing -Uri "https://developer.android.com/studio/releases/platforms").Content
            $result = [regex]::Match($response, " \(API level (?<model>\d+)\)")
            $apiLevel = $result.Groups["model"].Value
            Write-Output "Latest API is $apiLevel"
            echo "::set-output name=api-level::$apiLevel"
            echo "::set-output name=version-label::$apiLevel (latest)"
          }
          else 
          {
            Write-Output "Current API is $apiLevel"
            echo "::set-output name=api-level::$apiLevel"
            echo "::set-output name=version-label::$arch"
          }
          
          # Setup Arch and Target
          $target = $apiLevel -ge 30 ? 'google_apis' : 'default'
          Write-Output "Current Target is $target"
          echo "::set-output name=target::$target"
          
          $arch = $apiLevel -ge 30 ? 'x86_64' : 'x86'
          Write-Output "Current Arch is $arch"
          echo "::set-output name=arch::$arch"
          
          
          

      
      - name: Smoke test + Android emulator setup API ${{ steps.droid-settings.outputs.version-label }}
        id: smoke-test
        continue-on-error: true
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@76c2bf6f95ed6458fd659a1bdb680a0f8df232dc
        with:
          api-level: ${{ steps.droid-settings.outputs.api-level }}
          #api-level 30 image is only available with google services.
          target: ${{ steps.droid-settings.outputs.target }}
          force-avd-creation: false
          ram-size: 2048M
          arch: ${{ steps.droid-settings.outputs.arch }}
          cores: 2
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: sudo pwsh scripts/smoke-test-droid.ps1


      - name: Kill emulator if AVD failed.
        if: ${{ steps.smoke-test.outputs.smoke-status != 'Completed' }}
        shell: pwsh
        run: |
          Write-Host "Smoke test failed with status ${{ steps.smoke-test.outputs.smoke-status }}, closing simulator."
          adb emu kill
          sleep 7
      
      - name: Select AVD target
        id: select-avd-target
        shell: pwsh
        run: |
          $avdTarget = "default"
          If (${{ steps.droi-api.outputs.level }} -eq 30)
          {
            $avdTarget = "google_apis"
          }
          Write-Host "steps.select-avd-target.outputs.target is $avdTarget" 
          echo "::set-output name=target::$avdTarget"

      - name: Select AVD target 2
        shell: pwsh
        run: |
          Write-Output "Target Value is  ${{ steps.select-avd-target.outputs.target }} OR ${{ steps.select-avd-target.target }} OR ${{ steps.select-avd-target.outputs.target.value }}"
      
      - name: Install xcode-installer
        shell: pwsh
        run: gem install xcode-install

      - name: Install iOS ${{ matrix.testt}} runtime
        shell: pwsh
        run: xcversion simulators --install='iOS ${{ matrix.testt }}'

      - name: Create simulator
        shell: pwsh
        run: xcrun simctl create derp "iPhone 8" "iOS${{ matrix.testt }}"

      - name: Get list of devices
        shell: pwsh
        run: xcrun simctl list devices

      - name: Test2
        shell: pwsh
        run: |
          xcrun simctl list devices
        
      - name: Preparing test app for smoke test.
        uses: actions/upload-artifact@v2
        with:
          name: droid-testapp-aa
          path: scripts/app.apk

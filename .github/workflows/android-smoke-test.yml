on:
  workflow_call:
    inputs:
      unity-version:
        required: true
        type: string
      api-level:
        required: true
        type: string
      try:
        required: true
        type: number
    # Map the workflow outputs to job outputs
    outputs:
      outcome:
        description:
        value: ${{ jobs.run.outputs.outcome }}

jobs:
  run:
    name: try-${{ inputs.try }}
    runs-on: ubuntu-latest
    env:
      ARTIFACTS_PATH: samples/IntegrationTest/test-artifacts/
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    defaults:
      run:
        shell: pwsh        
    # Map the job outputs to step outputs
    outputs:
      outcome: ${{ steps.smoke-test.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Not required for MacOS.
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

#      - name: Download test app artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: testapp-Android-compiled-${{ inputs.unity-version }}
#          path: samples/IntegrationTest/Build

      # outputs variables: api-level, label, target
      - name: Configure Android Settings
        id: config
        run: |
          # Setup API Level
          $apiLevel = '28'
          if ( $apiLevel -eq 'latest')
          {
            # Gets the latest API level that isn't in Beta/Alpha
            $response = (Invoke-WebRequest -UseBasicParsing -Uri "https://developer.android.com/studio/releases/platforms").Content
            $result = [regex]::Match($response, " \(API level (?<model>\d+)\)")
            $apiLevel = $result.Groups["model"].Value
            Write-Output "Latest API is $apiLevel"
            $label = "$apiLevel (latest)"
          }
          else
          {
            Write-Output "Current API is $apiLevel"
          }
          # Setup Arch and Target
          $target = $apiLevel -ge 30 ? 'google_apis' : 'default'
          Write-Output "Current Target is $target"
          "target=$target" >> $env:GITHUB_OUTPUT
          "api-level=$apiLevel" >> $env:GITHUB_OUTPUT
          "label=$($label ?? $apiLevel)" >> $env:GITHUB_OUTPUT

      - name: Set up JDK 17
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Setup Android SDK
        uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407

#      - name: Gradle cache
#        uses: gradle/actions/setup-gradle@d0a116fff52a680bc1541b7c4c87ca37d30abf00

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ steps.config.outputs.api-level }}

      - name: create Android Emulator Image
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@d94c3fbe4fe6a29e4a5ba47c12fb47677c73656b # pin@v233.0
        with:
          api-level: ${{ steps.config.outputs.api-level }}
          target: ${{ steps.config.outputs.target }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          arch: x86_64
          script: |
            adb wait-for-device
            adb shell input keyevent 82
            adb devices -l
            # gradle connectedAndroidTest --continue
            echo "Generated AVD snapshot for caching."

      - name: Wait for Emulator to Close
        env:
          EMULATOR_NAME: emulator-5554 # Replace with your emulator ID
        run: |
          Write-Output "Waiting for emulator $env:EMULATOR_NAME to close..."
          $retries = 0
          $maxRetries = 60 # Adjust timeout (60 x 5 seconds = 5 minutes)
          while ($true) {
              $devices = adb devices | Select-String -Pattern $env:EMULATOR_NAME
              if (-not $devices) {
                  Write-Output "Emulator $env:EMULATOR_NAME is offline."
                  break
              }
              if ($retries -ge $maxRetries) {
                  Write-Error "Timeout: Emulator $env:EMULATOR_NAME did not go offline after $(($maxRetries * 5)) seconds."
                  exit 1
              }
              Write-Output "Emulator $env:EMULATOR_NAME is still running. Retrying in 5 seconds... ($retries/$maxRetries)"
              Start-Sleep -Seconds 5
              $retries++
          }

      - name: Android API ${{ steps.config.outputs.label }} Smoke test
        uses: reactivecircus/android-emulator-runner@d94c3fbe4fe6a29e4a5ba47c12fb47677c73656b # pin@v233.0
        id: smoke-test
        timeout-minutes: 40
        continue-on-error: true
        with:
          api-level: ${{ steps.config.outputs.api-level }}
          target: ${{ steps.config.outputs.target }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: pwsh ./scripts/smoke-test-android.ps1 -IsIntegrationTest -WarnIfFlaky

#      - name: Upload artifacts on failure
#        if: ${{ failure() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: testapp-android-logs-${{ inputs.api-level }}-${{ inputs.unity-version }}-${{ inputs.try }}
#          path: ${{ env.ARTIFACTS_PATH }}
#          retention-days: 14
